---
// Locations section component for Active Away - Tailwind CSS Version
import { getFeaturedLocations } from '../utils/strapi.js';
import { getImageByName } from '../utils/cloudflareImages.js';
import { MapPin, Tag, Hotel } from 'lucide-react';

// Fetch featured locations from Strapi
let locations = await getFeaturedLocations();

// Fallback to hardcoded data if Strapi fails or returns no data
if (!locations || locations.length === 0) {
  console.warn('‚ö†Ô∏è  Using fallback locations data');
  
  // Get dynamic image URLs for fallback
  const location1Image = getImageByName('location-1', { size: 'public' });
  const location2Image = getImageByName('location-2', { size: 'public' });
  const location3Image = getImageByName('location-3', { size: 'public' });
  
  locations = [
    {
      id: 1,
      title: "Adult Tennis Holiday - 5* Sani Beach Hotel",
      location: "Greece",
      type: "Adult Hosted Tennis Holiday",
      price: "Single Occupancy from ¬£420",
      amount: "from ¬£420pp",
      image: location1Image,
      imageAlt: "Tennis courts in Greece",
      active: false
    },
    {
      id: 2,
      title: "Adult Tennis Holiday - 5* Sani Beach Hotel",
      location: "Greece",
      type: "Adult Hosted Tennis Holiday",
      price: "Single Occupancy from ¬£420",
      amount: "from ¬£420pp",
      image: location3Image,
      imageAlt: "Tennis stadium",
      active: true
    },
    {
      id: 3,
      title: "Adult Tennis Holiday - 5* Sani Beach Hotel",
      location: "Greece",
      type: "Adult Hosted Tennis Holiday",
      price: "Single Occupancy from ¬£420",
      amount: "from ¬£420pp",
      image: location2Image,
      imageAlt: "Tennis coaching",
      active: false
    },
    {
      id: 4,
      title: "Adult Tennis Holiday - 5* Sani Beach Hotel",
      location: "Greece",
      type: "Adult Hosted Tennis Holiday",
      price: "Single Occupancy from ¬£420",
      amount: "from ¬£420pp",
      image: location1Image,
      imageAlt: "Tennis coaching",
      active: false
    }
  ];
}
---

<section class="w-full bg-white py-12 sm:py-16 lg:py-24">
  <div class="container mx-auto max-w-[1400px] px-4 sm:px-10">
    <!-- Header -->
    <div class="mb-6 sm:mb-8 lg:mb-16">
      <div class="flex flex-col sm:flex-row sm:items-end sm:justify-between gap-2 sm:gap-3 lg:gap-4">
        <div>
          <div class="text-sm sm:text-base font-inter font-medium text-gray-900 tracking-widest uppercase mb-1 sm:mb-2">
            DESTINATIONS
          </div>
          <h2 class="text-2xl sm:text-3xl lg:text-4xl font-playfair font-semibold text-gray-900">
            Explore our Locations
          </h2>
        </div>
        <a href="#all-locations" class="text-base sm:text-lg font-inter text-gray-900 underline hover:text-gray-700 transition-colors">
          See All Locations
        </a>
      </div>
    </div>

    <!-- Cards Carousel -->
    <div class="relative">
      <!-- Navigation Arrows -->
      <button class="hidden lg:flex absolute left-4 top-1/2 transform -translate-y-1/2 z-10 w-12 h-12 bg-gold rounded-full shadow-lg items-center justify-center hover:bg-gold-700 transition-all duration-300" onclick="previousCard()">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M15 18L9 12L15 6" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      
      <button class="hidden lg:flex absolute right-4 top-1/2 transform -translate-y-1/2 z-10 w-12 h-12 bg-gold rounded-full shadow-lg items-center justify-center hover:bg-gold-700 transition-all duration-300" onclick="nextCard()">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M9 18L15 12L9 6" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>

      <!-- Cards Container Wrapper -->
      <div class="relative">
        <!-- Cards Container -->
        <div id="cardsContainer" class="flex flex-row overflow-x-auto lg:overflow-visible snap-x snap-mandatory lg:snap-none justify-start lg:justify-between items-stretch gap-4 sm:gap-6 lg:gap-6 pb-4 lg:pb-0 pl-4 sm:pl-10 lg:pl-0 transition-transform duration-500 ease-out">
          {locations.map((location, index) => (
            <div class="location-card flex-shrink-0 w-[calc(100vw-5rem)] sm:w-[calc(100vw-8rem)] lg:w-[calc((100%-3rem)/3)] snap-start relative" data-index={index}>
            <!-- Card Image -->
            <div class="relative overflow-hidden rounded-2xl bg-gray-900 z-0">
              <img 
                src={location.image} 
                alt={location.imageAlt || location.title} 
                {...(location.imageSrcSet && { 
                  srcset: location.imageSrcSet, 
                  sizes: "(max-width: 768px) calc(100vw - 5rem), (max-width: 1024px) calc(100vw - 8rem), 33vw" 
                })}
                class="w-full h-48 sm:h-56 lg:h-64 object-cover" 
              />
            </div>
            
            <!-- Card Content -->
            <div class="relative -mt-6 sm:-mt-8 lg:-mt-12 z-20 px-3 sm:px-6 pb-3 sm:pb-6">
              <div class="bg-white border border-gray-200 rounded-2xl p-4 sm:p-6 shadow-xl flex flex-col">
                <h3 class="text-base sm:text-xl lg:text-2xl font-playfair font-bold text-gray-900 mb-2 sm:mb-4 leading-tight">
                  {location.title}
                </h3>
                
                <div class="space-y-1.5 sm:space-y-3 mb-3 sm:mb-6">
                  <!-- Country -->
                  <div class="flex items-center gap-2">
                    <MapPin className="w-4 h-4 sm:w-5 sm:h-5 text-gray-600 flex-shrink-0" client:load />
                    <span class="text-sm sm:text-base font-inter text-gray-700">{location.location}</span>
                  </div>
                  
                  <!-- Holiday Type -->
                  <div class="flex items-center gap-2">
                    <Tag className="w-4 h-4 sm:w-5 sm:h-5 text-gray-600 flex-shrink-0" client:load />
                    <span class="text-sm sm:text-base font-inter text-gray-700">{location.type}</span>
                  </div>
                  
                  <!-- Price (only show if exists) -->
                  {location.price && (
                    <div class="flex items-center gap-2">
                      <Hotel className="w-4 h-4 sm:w-5 sm:h-5 text-gray-600 flex-shrink-0" client:load />
                      <span class="text-sm sm:text-base font-inter text-gray-700">{location.price}</span>
                    </div>
                  )}
                </div>
                
                <div class="flex items-center justify-between gap-3 mt-auto">
                  {location.amount && (
                    <div class="font-inter text-gray-900">
                      <span class="text-xs sm:text-base font-normal text-gray-600">from </span>
                      <span class="text-xl sm:text-3xl lg:text-4xl font-bold">{location.amount.replace('from ', '').replace('pp', '')}</span><span class="text-base sm:text-xl lg:text-2xl font-semibold">pp</span>
                    </div>
                  )}
                  <button class="px-4 sm:px-6 py-2 sm:py-3 bg-gold hover:bg-gold-700 text-white font-inter font-medium text-xs sm:text-base rounded-full transition-all duration-300 hover:-translate-y-0.5 whitespace-nowrap">
                    Explore
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))}
        </div>
      </div>
    </div>

    <!-- Pagination Dots -->
    <div id="paginationDots" class="flex justify-center items-center gap-2 mt-8 sm:mt-12">
      {Array.from({ length: Math.ceil(locations.length / 3) }, (_, i) => (
        <button 
          class={`pagination-dot transition-all duration-300 ${i === 0 ? 'w-8 h-2' : 'w-2 h-2 bg-gray-300'} rounded-full`}
          style={i === 0 ? 'background-color: #ad986c;' : ''}
          data-page={i}
          onclick={`goToPage(${i})`}
          aria-label={`Go to page ${i + 1}`}
        ></button>
      ))}
    </div>
  </div>
</section>

<style>
  .font-inter {
    font-family: 'Inter', sans-serif;
  }
  
  .font-playfair {
    font-family: 'Playfair Display', serif;
  }
  
  /* Smooth scroll for mobile carousel */
  .overflow-x-auto {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE/Edge */
  }
  
  .overflow-x-auto::-webkit-scrollbar {
    display: none; /* Chrome/Safari */
  }
  
  /* Smooth transitions */
  .location-card {
    transition: all 0.3s ease;
    position: relative;
  }
  
  /* White overlay for cards outside main view */
  .location-card::after {
    content: '';
    position: absolute;
    inset: 0;
    background: rgba(255, 255, 255, 0.7);
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    z-index: 5;
    border-radius: 1rem;
  }
  
  /* Show overlay on cards outside main view */
  .location-card.card-hidden::after {
    opacity: 1;
  }
  
  /* Desktop only: Active/Inactive card states */
  @media (min-width: 1024px) {
    .location-card.active-desktop {
      transform: scale(1.08);
      z-index: 10;
    }
    
    .location-card.inactive-desktop {
      opacity: 0.65;
      transform: scale(0.90);
    }
  }
</style>

<script>
  // Carousel functionality
  let currentPage = 0;
  const cardsPerPage = 3; // Show 3 cards at a time on desktop
  let totalCards = 0;
  let totalPages = 0;
  const isDesktop = () => window.innerWidth >= 1024;

  function initCarousel() {
    const cards = document.querySelectorAll('.location-card');
    totalCards = cards.length;
    totalPages = Math.ceil(totalCards / cardsPerPage);
    
    console.log(`üé† Carousel initialized: ${totalCards} cards, ${totalPages} pages`);
    
    updateCarousel();
  }

  function updateCarousel() {
    if (!isDesktop()) {
      // Mobile: no transform, use native scroll
      const container = document.getElementById('cardsContainer');
      if (container) {
        container.style.transform = 'translateX(0)';
      }
      // Remove all overlays on mobile
      const cards = document.querySelectorAll('.location-card');
      cards.forEach(card => card.classList.remove('card-hidden'));
      return;
    }
    
    // Desktop: show 3 cards at a time with transform
    const container = document.getElementById('cardsContainer');
    const cards = document.querySelectorAll('.location-card');
    const dots = document.querySelectorAll('.pagination-dot');
    
    if (!container || cards.length === 0) return;
    
    // Calculate the offset based on card index
    // Get the first card to measure width
    const firstCard = cards[0];
    if (!firstCard) return;
    
    const cardWidth = firstCard.offsetWidth;
    const containerRect = container.getBoundingClientRect();
    const gapWidth = 24; // lg:gap-6 = 1.5rem = 24px
    
    // Calculate how much to move: (cardWidth + gap) * cardsPerPage * currentPage
    const offsetPx = (cardWidth + gapWidth) * cardsPerPage * currentPage;
    
    console.log(`üìè Card width: ${cardWidth}px, Gap: ${gapWidth}px, Offset: ${offsetPx}px, Page: ${currentPage}`);
    
    container.style.transform = `translateX(-${offsetPx}px)`;
    
    // Update card overlays - show overlay on cards outside current view
    const firstVisibleIndex = currentPage * cardsPerPage;
    const lastVisibleIndex = firstVisibleIndex + cardsPerPage - 1;
    
    cards.forEach((card, index) => {
      if (index < firstVisibleIndex || index > lastVisibleIndex) {
        card.classList.add('card-hidden');
      } else {
        card.classList.remove('card-hidden');
      }
    });
    
    // Update dots
    dots.forEach((dot, index) => {
      if (index === currentPage) {
        dot.classList.remove('w-2', 'bg-gray-300');
        dot.classList.add('w-8');
        dot.style.backgroundColor = '#ad986c'; // Gold color
      } else {
        dot.classList.remove('w-8');
        dot.classList.add('w-2', 'bg-gray-300');
        dot.style.backgroundColor = '';
      }
    });
    
    // Show/hide navigation arrows based on position
    const prevBtn = document.querySelector('button[onclick="previousCard()"]');
    const nextBtn = document.querySelector('button[onclick="nextCard()"]');
    
    if (prevBtn) {
      prevBtn.style.opacity = currentPage === 0 ? '0.3' : '1';
      prevBtn.style.pointerEvents = currentPage === 0 ? 'none' : 'auto';
    }
    
    if (nextBtn) {
      nextBtn.style.opacity = currentPage >= totalPages - 1 ? '0.3' : '1';
      nextBtn.style.pointerEvents = currentPage >= totalPages - 1 ? 'none' : 'auto';
    }
  }

  function nextCard() {
    if (currentPage < totalPages - 1) {
      currentPage++;
      console.log(`‚û°Ô∏è  Next page: ${currentPage}`);
      updateCarousel();
    }
  }

  function previousCard() {
    if (currentPage > 0) {
      currentPage--;
      console.log(`‚¨ÖÔ∏è  Previous page: ${currentPage}`);
      updateCarousel();
    }
  }
  
  function goToPage(pageIndex) {
    currentPage = pageIndex;
    console.log(`üéØ Go to page: ${currentPage}`);
    updateCarousel();
  }
  
  // Make functions globally accessible
  window.nextCard = nextCard;
  window.previousCard = previousCard;
  window.goToPage = goToPage;

  // Update pagination dots on mobile scroll
  function updateDotsOnScroll() {
    if (isDesktop()) return;
    
    const container = document.getElementById('cardsContainer');
    const cards = document.querySelectorAll('.location-card');
    const dots = document.querySelectorAll('.pagination-dot');
    
    if (!container || cards.length === 0) return;
    
    // Calculate which card is most in view
    const containerRect = container.getBoundingClientRect();
    const containerCenter = containerRect.left + (containerRect.width / 2);
    
    let closestIndex = 0;
    let closestDistance = Infinity;
    
    cards.forEach((card, index) => {
      const cardRect = card.getBoundingClientRect();
      const cardCenter = cardRect.left + (cardRect.width / 2);
      const distance = Math.abs(cardCenter - containerCenter);
      
      if (distance < closestDistance) {
        closestDistance = distance;
        closestIndex = index;
      }
    });
    
    // Update current page for dots (groups of 3)
    const dotIndex = Math.floor(closestIndex / 3);
    
    // Update dots appearance
    dots.forEach((dot, index) => {
      if (index === dotIndex) {
        dot.classList.remove('w-2', 'bg-gray-300');
        dot.classList.add('w-8');
        dot.style.backgroundColor = '#ad986c';
      } else {
        dot.classList.remove('w-8');
        dot.classList.add('w-2', 'bg-gray-300');
        dot.style.backgroundColor = '';
      }
    });
  }

  // Initialize carousel on page load
  document.addEventListener('DOMContentLoaded', () => {
    initCarousel();
    
    // Add scroll listener for mobile
    const container = document.getElementById('cardsContainer');
    if (container) {
      container.addEventListener('scroll', updateDotsOnScroll);
    }
  });
  
  // Re-init on resize (with small delay to let layout settle)
  let resizeTimeout;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
      currentPage = 0; // Reset to first page on resize
      updateCarousel();
    }, 100);
  });
</script>
