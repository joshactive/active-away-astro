---
// Locations section component for Active Away - Tailwind CSS Version
import { getFeaturedLocations } from '../utils/strapi.js';
import { getImageByName, getResponsiveImageByName, getStrapiImageAttrs } from '../utils/cloudflareImages.js';
import MapPinIcon from './ui/icons/MapPinIcon.astro';
import TagIcon from './ui/icons/TagIcon.astro';
import HotelIcon from './ui/icons/HotelIcon.astro';

// Fetch featured locations from Strapi
let locations = await getFeaturedLocations();

const LOCATION_IMAGE_SIZES = '(max-width: 640px) calc(100vw - 5rem), (max-width: 1024px) calc(100vw - 8rem), 455px';
const LOCATION_IMAGE_QUALITY = 60;

const buildLocationImage = (imageName, alt) => {
  const attrs = getResponsiveImageByName(imageName, {
    displayWidth: 455,
    displayHeight: 256,
    fit: 'cover',
    alt,
    sizes: LOCATION_IMAGE_SIZES,
    quality: LOCATION_IMAGE_QUALITY
  });

  if (attrs) {
    return attrs;
  }

  const fallbackSrc = getImageByName(imageName, { width: 455, height: 256, fit: 'cover', format: 'auto', quality: LOCATION_IMAGE_QUALITY });
  return {
    src: fallbackSrc,
    url: fallbackSrc,
    width: 455,
    height: 256,
    alt,
    loading: 'lazy',
    sizes: LOCATION_IMAGE_SIZES
  };
};

// Fallback to hardcoded data if Strapi fails or returns no data
if (!locations || locations.length === 0) {
  console.warn('⚠️  Using fallback locations data');
  
  const location1Image = buildLocationImage('location-1', 'Adult Tennis Holiday - 5* Sani Beach Hotel');
  const location2Image = buildLocationImage('location-2', 'Adult Tennis Holiday - 5* Sani Beach Hotel');
  const location3Image = buildLocationImage('location-3', 'Adult Tennis Holiday - 5* Sani Beach Hotel');
  
  locations = [
    {
      id: 1,
      title: "Adult Tennis Holiday - 5* Sani Beach Hotel",
      location: "Greece",
      type: "Adult Hosted Tennis Holiday",
      price: "Single Occupancy from £420",
      amount: "from £420pp",
      image: location1Image,
      imageAlt: "Tennis courts in Greece",
      active: false
    },
    {
      id: 2,
      title: "Adult Tennis Holiday - 5* Sani Beach Hotel",
      location: "Greece",
      type: "Adult Hosted Tennis Holiday",
      price: "Single Occupancy from £420",
      amount: "from £420pp",
      image: location3Image,
      imageAlt: "Tennis stadium",
      active: true
    },
    {
      id: 3,
      title: "Adult Tennis Holiday - 5* Sani Beach Hotel",
      location: "Greece",
      type: "Adult Hosted Tennis Holiday",
      price: "Single Occupancy from £420",
      amount: "from £420pp",
      image: location2Image,
      imageAlt: "Tennis coaching",
      active: false
    },
    {
      id: 4,
      title: "Adult Tennis Holiday - 5* Sani Beach Hotel",
      location: "Greece",
      type: "Adult Hosted Tennis Holiday",
      price: "Single Occupancy from £420",
      amount: "from £420pp",
      image: location1Image,
      imageAlt: "Tennis coaching",
      active: false
    }
  ];
}
---

<section class="w-full bg-white py-12 sm:py-16 lg:py-24">
  <div class="container mx-auto max-w-[1400px] px-4 sm:px-10">
    <!-- Header -->
    <div class="mb-6 sm:mb-8 lg:mb-16">
      <div class="flex flex-col sm:flex-row sm:items-end sm:justify-between gap-2 sm:gap-3 lg:gap-4">
        <div>
          <div class="text-sm sm:text-base font-inter font-medium text-gray-900 tracking-widest uppercase mb-1 sm:mb-2">
            DESTINATIONS
          </div>
          <h2 class="text-2xl sm:text-3xl lg:text-4xl font-playfair font-semibold text-gray-900">
            Explore our Locations
          </h2>
        </div>
        <a href="/venues" class="text-base sm:text-lg font-inter text-gray-900 underline hover:text-gray-700 transition-colors">
          See All Locations
        </a>
      </div>
    </div>

    <!-- Cards Carousel -->
    <div class="relative">
      <!-- Navigation Arrows -->
      <button class="hidden lg:flex absolute left-4 top-1/2 transform -translate-y-1/2 z-10 w-12 h-12 bg-gold rounded-full shadow-lg items-center justify-center hover:bg-gold-700 transition-all duration-300" onclick="previousCard()">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M15 18L9 12L15 6" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      
      <button class="hidden lg:flex absolute right-4 top-1/2 transform -translate-y-1/2 z-10 w-12 h-12 bg-gold rounded-full shadow-lg items-center justify-center hover:bg-gold-700 transition-all duration-300" onclick="nextCard()">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M9 18L15 12L9 6" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>

      <!-- Cards Container Wrapper -->
      <div class="relative">
        <!-- Cards Container -->
        <div id="cardsContainer" class="flex flex-row overflow-x-auto lg:overflow-visible snap-x snap-mandatory lg:snap-none justify-start lg:justify-between items-stretch gap-4 sm:gap-6 lg:gap-6 pb-4 lg:pb-0 pl-4 sm:pl-10 lg:pl-0 transition-transform duration-500 ease-out">
          {locations.map((location, index) => {
            const imageAlt = location.image?.alt || location.imageAlt || location.title;
            let imgAttrs;

            if (location.image?.src) {
              imgAttrs = {
                ...location.image,
                alt: location.image.alt || imageAlt,
                sizes: location.image.sizes || LOCATION_IMAGE_SIZES
              };
            } else {
              const imageUrl = typeof location.image === 'string' ? location.image : location.image?.url;
              if (imageUrl) {
                const strapiAttrs = getStrapiImageAttrs({ url: imageUrl, alt: imageAlt }, {
                  displayWidth: 455,
                  displayHeight: 256,
                  fit: 'cover',
                  sizes: LOCATION_IMAGE_SIZES,
                  quality: LOCATION_IMAGE_QUALITY
                });
                imgAttrs = strapiAttrs ?? {
                  src: imageUrl,
                  url: imageUrl,
                  alt: imageAlt,
                  width: 455,
                  height: 256,
                  loading: 'lazy',
                  sizes: LOCATION_IMAGE_SIZES
                };
              } else {
                imgAttrs = buildLocationImage('location-1', imageAlt);
              }
            }

            return (
            <a 
              href={location.slug ? `/tennis-holiday/${location.slug}` : '#'}
              class="location-card flex-shrink-0 w-[calc(100vw-5rem)] sm:w-[calc(100vw-8rem)] lg:w-[calc((100%-3rem)/3)] snap-start group bg-white border-2 border-gray-200 rounded-2xl overflow-hidden shadow-sm hover:shadow-xl hover:border-[#ad986c] transition-all duration-300 hover:-translate-y-1" 
              data-index={index}
            >
              {/* Card Image */}
              <div class="aspect-video overflow-hidden bg-gray-100 relative">
                <img 
                  src={imgAttrs.src}
                  {...(imgAttrs.srcset && { srcset: imgAttrs.srcset })}
                  sizes={imgAttrs.sizes || LOCATION_IMAGE_SIZES}
                  width={imgAttrs.width || 455}
                  height={imgAttrs.height || 256}
                  alt={imgAttrs.alt || imageAlt}
                  loading={imgAttrs.loading || 'lazy'}
                  decoding="async"
                  class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500" 
                />
                <div class="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>
              
              {/* Card Content */}
              <div class="p-6">
                <h3 class="text-xl font-playfair font-semibold text-gray-900 mb-3 group-hover:text-[#ad986c] transition-colors leading-tight">
                  {location.title}
                </h3>
                
                {/* Location */}
                {location.location && (
                  <div class="flex items-center gap-2 text-sm text-gray-600 font-inter mb-4">
                    <svg class="w-4 h-4 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                    {location.location}
                  </div>
                )}
                
                {/* Price Display */}
                {location.amount && (
                  <div class="mb-4">
                    <p class="text-sm text-gray-600 font-inter mb-1">From</p>
                    <p class="text-3xl font-bold text-[#ad986c] font-playfair">{location.amount.replace('from ', '').replace('pp', '')}<span class="text-lg">pp</span></p>
                    {!location.type?.toLowerCase().includes('clinic') && (
                      <p class="text-xs text-gray-500 font-inter mt-1">Based on 2 sharing</p>
                    )}
                  </div>
                )}
                
                {/* View Details Arrow */}
                <div class="mt-4 flex items-center gap-2 text-[#ad986c] font-inter font-semibold text-sm group-hover:gap-3 transition-all">
                  <span>View Details</span>
                  <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
                  </svg>
                </div>
              </div>
            </a>
            );
          })}
          
          <!-- View More Card -->
          <a href="/venues" class="location-card flex-shrink-0 w-[calc(100vw-5rem)] sm:w-[calc(100vw-8rem)] lg:w-[calc((100%-3rem)/3)] snap-start group bg-white border-2 border-gray-200 rounded-2xl overflow-hidden shadow-sm hover:shadow-xl hover:border-[#ad986c] transition-all duration-300 hover:-translate-y-1" data-index={locations.length}>
            <div class="p-8 lg:p-12 flex flex-col items-center justify-center text-center min-h-[400px]">
              <h3 class="text-2xl sm:text-3xl font-playfair font-semibold text-gray-900 mb-4 group-hover:text-[#ad986c] transition-colors">
                View All Locations
              </h3>
              
              <p class="text-base sm:text-lg font-inter text-gray-800 mb-6">
                Explore all our amazing destinations
              </p>
              
              <div class="inline-flex items-center gap-2 bg-[#ad986c] hover:bg-[#8d7a56] text-white px-6 py-3 rounded-full font-inter font-semibold text-sm transition-all duration-300 shadow-md">
                <span>View All</span>
                <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
                </svg>
              </div>
            </div>
          </a>
        </div>
      </div>
    </div>

    <!-- Pagination Dots -->
    <div id="paginationDots" class="flex justify-center items-center gap-2 mt-6 sm:mt-8 lg:mt-16">
      {Array.from({ length: Math.ceil((locations.length + 1) / 3) }, (_, i) => (
        <button 
          class={`pagination-dot transition-all duration-300 ${i === 0 ? 'w-8 h-2' : 'w-2 h-2 bg-gray-300'} rounded-full`}
          style={i === 0 ? 'background-color: #ad986c;' : ''}
          data-page={i}
          onclick={`goToPage(${i})`}
          aria-label={`Go to page ${i + 1}`}
        ></button>
      ))}
    </div>
  </div>
</section>

<style>
  .font-inter {
    font-family: 'Inter', sans-serif;
  }
  
  .font-playfair {
    font-family: 'Playfair Display', serif;
  }
  
  /* Smooth scroll for mobile carousel */
  .overflow-x-auto {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE/Edge */
  }
  
  .overflow-x-auto::-webkit-scrollbar {
    display: none; /* Chrome/Safari */
  }
  
  /* Smooth transitions */
  .location-card {
    transition: all 0.3s ease;
    position: relative;
  }
  
  /* White overlay for cards outside main view */
  .location-card::after {
    content: '';
    position: absolute;
    inset: 0;
    background: rgba(255, 255, 255, 0.7);
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    z-index: 5;
    border-radius: 1rem;
  }
  
  /* Show overlay on cards outside main view */
  .location-card.card-hidden::after {
    opacity: 1;
  }
  
  /* Hide pagination dots on mobile */
  @media (max-width: 1023px) {
    #paginationDots {
      display: none;
    }
  }
</style>

<script>
  // Carousel functionality
  let currentPage = 0;
  const cardsPerPage = 3; // Show 3 cards at a time on desktop
  let totalCards = 0;
  let totalPages = 0;
  const isDesktop = () => window.innerWidth >= 1024;
  const LOCATION_GAP_WIDTH = 24;
  const locationCardMetrics = {
    width: 0
  };
  const locationGapMetrics = {
    value: LOCATION_GAP_WIDTH
  };
  let locationResizeObserver;
  let locationDotObserver = null;
  let locationScrollHandler = null;
  let locationScrollTicking = false;

  function setActiveDots(dots, activeIndex) {
    dots.forEach((dot, index) => {
      const isActive = index === activeIndex;
      dot.classList.toggle('w-8', isActive);
      dot.classList.toggle('w-2', !isActive);
      if (isActive) {
        dot.classList.remove('bg-gray-300');
        dot.style.backgroundColor = '#ad986c';
      } else {
        dot.classList.add('bg-gray-300');
        dot.style.backgroundColor = '';
      }
    });
  }

  function measureLocationCardWidth(card) {
    if (!card) return;
    const { width } = card.getBoundingClientRect();
    if (width && Math.abs(width - locationCardMetrics.width) > 0.5) {
      locationCardMetrics.width = width;
    }
  }

  function setupLocationMeasurement(cards) {
    if (!cards || cards.length === 0) return;
    const firstCard = cards[0];
    measureLocationCardWidth(firstCard);
    const container = document.getElementById('cardsContainer');
    if (container) {
      const styles = window.getComputedStyle(container);
      const gapValue = parseFloat(
        styles.columnGap || styles.gap || styles.gridColumnGap || '0'
      );
      if (!Number.isNaN(gapValue) && gapValue > 0) {
        locationGapMetrics.value = gapValue;
      }
    }

    if (typeof ResizeObserver !== 'undefined' && !locationResizeObserver) {
      locationResizeObserver = new ResizeObserver((entries) => {
        const entry = entries[0];
        if (!entry) return;
        measureLocationCardWidth(entry.target);
        window.requestAnimationFrame(updateCarousel);
      });
      locationResizeObserver.observe(firstCard);
    }
  }

  function initCarousel() {
    const cards = document.querySelectorAll('.location-card');
    totalCards = cards.length;
    totalPages = Math.ceil(totalCards / cardsPerPage);
    setupLocationMeasurement(cards);
    
    console.log(`🎠 Carousel initialized: ${totalCards} cards, ${totalPages} pages`);
    
    updateCarousel();
  }

  function updateCarousel() {
    if (!isDesktop()) {
      // Mobile: no transform, use native scroll
      const container = document.getElementById('cardsContainer');
      if (container) {
        container.style.transform = 'translateX(0)';
      }
      // Remove all overlays on mobile
      const cards = document.querySelectorAll('.location-card');
      cards.forEach(card => card.classList.remove('card-hidden'));
      return;
    }
    
    // Desktop: show 3 cards at a time with transform
    const container = document.getElementById('cardsContainer');
    const cards = document.querySelectorAll('.location-card');
    const dots = document.querySelectorAll('.pagination-dot');
    
    if (!container || cards.length === 0) return;
    
    // Calculate the offset based on card index
    // Get the first card to measure width
    const firstCard = cards[0];
    if (!firstCard) return;

    if (!locationCardMetrics.width) {
      measureLocationCardWidth(firstCard);
    }

    const cardWidth = locationCardMetrics.width;
    const gapWidth = locationGapMetrics.value;
    if (!cardWidth) return;
    
    // Calculate how much to move: (cardWidth + gap) * cardsPerPage * currentPage
    const offsetPx = (cardWidth + gapWidth) * cardsPerPage * currentPage;
    
    console.log(`📏 Card width: ${cardWidth}px, Gap: ${gapWidth}px, Offset: ${offsetPx}px, Page: ${currentPage}`);
    
    container.style.transform = `translateX(-${offsetPx}px)`;
    
    // Update card overlays - show overlay on cards outside current view
    const firstVisibleIndex = currentPage * cardsPerPage;
    const lastVisibleIndex = firstVisibleIndex + cardsPerPage - 1;
    
    cards.forEach((card, index) => {
      if (index < firstVisibleIndex || index > lastVisibleIndex) {
        card.classList.add('card-hidden');
      } else {
        card.classList.remove('card-hidden');
      }
    });
    
    // Update dots
    setActiveDots(dots, currentPage);
    
    // Show/hide navigation arrows based on position
    const prevBtn = document.querySelector('button[onclick="previousCard()"]');
    const nextBtn = document.querySelector('button[onclick="nextCard()"]');
    
    if (prevBtn) {
      prevBtn.style.opacity = currentPage === 0 ? '0.3' : '1';
      prevBtn.style.pointerEvents = currentPage === 0 ? 'none' : 'auto';
    }
    
    if (nextBtn) {
      nextBtn.style.opacity = currentPage >= totalPages - 1 ? '0.3' : '1';
      nextBtn.style.pointerEvents = currentPage >= totalPages - 1 ? 'none' : 'auto';
    }
  }

  function nextCard() {
    if (currentPage < totalPages - 1) {
      currentPage++;
      console.log(`➡️  Next page: ${currentPage}`);
      updateCarousel();
    }
  }

  function previousCard() {
    if (currentPage > 0) {
      currentPage--;
      console.log(`⬅️  Previous page: ${currentPage}`);
      updateCarousel();
    }
  }
  
  function goToPage(pageIndex) {
    currentPage = pageIndex;
    console.log(`🎯 Go to page: ${currentPage}`);
    updateCarousel();
  }

  function teardownLocationDotTracking() {
    const container = document.getElementById('cardsContainer');
    if (locationDotObserver) {
      locationDotObserver.disconnect();
      locationDotObserver = null;
    }
    if (container && locationScrollHandler) {
      container.removeEventListener('scroll', locationScrollHandler);
      locationScrollHandler = null;
      locationScrollTicking = false;
    }
  }

  function setupLocationDotTracking() {
    const container = document.getElementById('cardsContainer');
    const dots = document.querySelectorAll('.pagination-dot');
    if (!container || dots.length === 0) return;

    teardownLocationDotTracking();

    if (isDesktop()) {
      setActiveDots(dots, currentPage);
      return;
    }

    const cards = container.querySelectorAll('.location-card');
    if (cards.length === 0) return;

    if ('IntersectionObserver' in window) {
      locationDotObserver = new IntersectionObserver(
        (entries) => {
          const visible = entries
            .filter((entry) => entry.isIntersecting)
            .sort((a, b) => b.intersectionRatio - a.intersectionRatio)[0];
          if (!visible) return;
          const cardIndex = Number(visible.target.getAttribute('data-index') || '0');
          const dotIndex = Math.min(
            Math.floor(cardIndex / cardsPerPage),
            dots.length - 1
          );
          setActiveDots(dots, dotIndex);
        },
        {
          root: container,
          threshold: 0.6
        }
      );

      cards.forEach((card) => locationDotObserver.observe(card));
      return;
    }

    locationScrollHandler = () => {
      if (locationScrollTicking) return;
      locationScrollTicking = true;

      window.requestAnimationFrame(() => {
        const cardWidth =
          locationCardMetrics.width ||
          container.firstElementChild?.getBoundingClientRect?.().width ||
          container.clientWidth;
        const itemSpan = cardWidth + locationGapMetrics.value;
        if (itemSpan > 0) {
          const scrollCenter = container.scrollLeft + container.clientWidth / 2;
          const approxIndex = Math.round(scrollCenter / itemSpan);
          const dotIndex = Math.max(
            0,
            Math.min(Math.floor(approxIndex / cardsPerPage), dots.length - 1)
          );
          setActiveDots(dots, dotIndex);
        }
        locationScrollTicking = false;
      });
    };

    container.addEventListener('scroll', locationScrollHandler, { passive: true });
    // Sync initial state
    locationScrollHandler();
  }
  
  // Make functions globally accessible
  window.nextCard = nextCard;
  window.previousCard = previousCard;
  window.goToPage = goToPage;

  // Initialize carousel on page load
  document.addEventListener('DOMContentLoaded', () => {
    initCarousel();
    setupLocationDotTracking();
  });
  
  // Re-init on resize (with small delay to let layout settle)
  let resizeTimeout;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
      currentPage = 0; // Reset to first page on resize
      updateCarousel();
      setupLocationDotTracking();
    }, 100);
  });
</script>
