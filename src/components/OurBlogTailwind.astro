---
// Blog data - Fetched from Strapi - Tailwind CSS Version
import { getBlogs } from '../utils/strapi.js';
import { getImageByName, getResponsiveImageByName, getStrapiImageAttrs } from '../utils/cloudflareImages.js';

// Fetch blogs from Strapi
let blogs = await getBlogs(8); // Get 8 most recent posts

// Fallback to hardcoded data if Strapi fails or returns no data
const BLOG_IMAGE_SIZES = '(max-width: 640px) calc(100vw - 5rem), (max-width: 1024px) calc(100vw - 8rem), 704px';
const BLOG_IMAGE_QUALITY = 60;

const buildBlogImage = (imageName, alt) => {
  const attrs = getResponsiveImageByName(imageName, {
    displayWidth: 704,
    displayHeight: 256,
    fit: 'cover',
    alt,
    sizes: BLOG_IMAGE_SIZES,
    quality: BLOG_IMAGE_QUALITY
  });

  if (attrs) {
    return attrs;
  }

  const fallbackSrc = getImageByName(imageName, { width: 704, height: 256, fit: 'cover', format: 'auto', quality: BLOG_IMAGE_QUALITY });
  return {
    src: fallbackSrc,
    url: fallbackSrc,
    width: 704,
    height: 256,
    alt,
    loading: 'lazy',
    sizes: BLOG_IMAGE_SIZES
  };
};

if (!blogs || blogs.length === 0) {
  console.warn('⚠️  Using fallback blog data');
  
  blogs = [
    {
      id: 1,
      image: buildBlogImage('blog-2', 'Newcastle Under-Lyme School Tennis Team Enjoy a Wimbledon Escape!'),
      author: "Josh Thompson",
      date: "July 4, 2025",
      title: "Newcastle Under-Lyme School Tennis Team Enjoy a Wimbledon Escape!",
      description: "Newcastle-under-Lyme School enjoy a VIP Wimbledon trip with coaching, luxury hotel stay and more on the first-ever....",
      slug: "wimbledon-escape"
    },
    {
      id: 2,
      image: buildBlogImage('blog-1', 'Active Away Takes On Five Tennis Academies At Ikos Resorts'),
      author: "Josh Thompson",
      date: "February 20, 2025",
      title: "Active Away Takes On Five Tennis Academies At Ikos Resorts",
      description: "Discover the best tennis travel destinations worldwide. Explore stunning courts from scenic locales to iconic arenas for your..",
      slug: "five-tennis-academies"
    },
    {
      id: 3,
      image: buildBlogImage('blog-3', 'Tennis Nutrition: What to Eat for Optimal Performance'),
      author: "Sophie Westlake",
      date: "February 6, 2025",
      title: "Tennis Nutrition: What to Eat for Optimal Performance",
      description: "Discover the best nutrition tips for tennis players to enhance performance, boost energy levels, and speed up recovery...",
      slug: "tennis-nutrition"
    }
  ];
}

const blogData = {
  kicker: "EXPLORE",
  title: "Our Blog",
  viewAllLink: "View All Posts",
  blogs: blogs
};

// Debug: Log the blogs
console.log('📝 Blog Posts:', blogData.blogs.length);
console.log('📝 Blog Data:', blogData.blogs.map(b => b.title));
---

<section class="w-full bg-gray-50 py-12 sm:py-16 lg:py-24">
  <div class="container mx-auto max-w-[1400px] px-4 sm:px-10">
    <!-- Header -->
    <div class="mb-6 sm:mb-8 lg:mb-16">
      <div class="flex flex-col sm:flex-row sm:items-end sm:justify-between gap-2 sm:gap-3 lg:gap-4">
        <div>
          <div class="text-sm sm:text-base font-inter font-medium text-gray-900 tracking-widest uppercase mb-1 sm:mb-2">
            {blogData.kicker}
          </div>
          <h2 class="text-2xl sm:text-3xl lg:text-4xl font-playfair font-semibold text-gray-900">
            {blogData.title}
          </h2>
        </div>
        <a href="/blog" class="text-base sm:text-lg font-inter text-gray-900 underline hover:text-gray-700 transition-colors">
          {blogData.viewAllLink}
        </a>
      </div>
    </div>

    <!-- Blog Carousel -->
    <div class="relative">
      <!-- Navigation Arrows -->
      <button class="hidden lg:flex absolute left-4 top-1/2 transform -translate-y-1/2 z-10 w-12 h-12 bg-[#ad986c] rounded-full shadow-lg items-center justify-center hover:bg-[#8a7454] transition-all duration-300" onclick="previousBlogCard()">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M15 18L9 12L15 6" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      <button class="hidden lg:flex absolute right-4 top-1/2 transform -translate-y-1/2 z-10 w-12 h-12 bg-[#ad986c] rounded-full shadow-lg items-center justify-center hover:bg-[#8a7454] transition-all duration-300" onclick="nextBlogCard()">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M9 18L15 12L9 6" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>

      <!-- Cards Container Wrapper -->
      <div class="relative">
        <!-- Cards Container -->
        <div id="blogsContainer" class="flex flex-row overflow-x-auto lg:overflow-visible snap-x snap-mandatory lg:snap-none justify-start lg:justify-between items-stretch gap-4 sm:gap-6 lg:gap-6 pb-4 lg:pb-0 pl-4 sm:pl-10 lg:pl-0 transition-transform duration-500 ease-out">
          {blogData.blogs.map((blog, index) => {
            const imageAlt = blog.image?.alt || blog.imageAlt || blog.title;
            let imgAttrs;

            if (blog.image?.src) {
              imgAttrs = {
                ...blog.image,
                alt: blog.image.alt || imageAlt,
                sizes: blog.image.sizes || BLOG_IMAGE_SIZES
              };
            } else {
              const imageUrl = typeof blog.image === 'string' ? blog.image : blog.image?.url;
              if (imageUrl) {
                const config = {
                  displayWidth: 704,
                  displayHeight: 256,
                  fit: 'cover',
                  sizes: BLOG_IMAGE_SIZES,
                  alt: imageAlt,
                  quality: BLOG_IMAGE_QUALITY
                };

                const strapiAttrs = getStrapiImageAttrs({ url: imageUrl, alt: imageAlt }, config);
                imgAttrs = strapiAttrs ?? {
                  src: imageUrl,
                  url: imageUrl,
                  alt: imageAlt,
                  width: 704,
                  height: 256,
                  loading: 'lazy',
                  sizes: BLOG_IMAGE_SIZES
                };
              } else {
                imgAttrs = buildBlogImage('blog-1', imageAlt);
              }
            }

            return (
            <a 
              href={`/blog/${blog.slug || blog.id}`} 
              class="blog-card flex-shrink-0 w-[calc(100vw-5rem)] sm:w-[calc(100vw-8rem)] lg:w-[calc((100%-3rem)/3)] snap-start group bg-white border-2 border-gray-200 rounded-2xl overflow-hidden shadow-sm hover:shadow-xl hover:border-[#ad986c] transition-all duration-300 hover:-translate-y-1" 
              data-index={index}
            >
              {/* Card Image */}
              <div class="aspect-video overflow-hidden bg-gray-100 relative">
                <img 
                  src={imgAttrs.src}
                  {...(imgAttrs.srcset && { srcset: imgAttrs.srcset })}
                  sizes={imgAttrs.sizes || BLOG_IMAGE_SIZES}
                  width={imgAttrs.width || 704}
                  height={imgAttrs.height || 256}
                  alt={imgAttrs.alt || imageAlt}
                  loading={imgAttrs.loading || 'lazy'}
                  class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500" 
                />
                <div class="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>
              
              {/* Card Content */}
              <div class="p-6">
                {/* Tags */}
                <div class="flex flex-wrap gap-2 mb-3">
                  <span class="px-3 py-1 bg-[#ad986c]/10 text-[#ad986c] text-xs font-inter font-semibold rounded-full">{blog.author}</span>
                  <span class="px-3 py-1 bg-gray-100 text-gray-600 text-xs font-inter font-medium rounded-full">{blog.date}</span>
                </div>

                {/* Title */}
                <h3 class="text-xl font-playfair font-semibold text-gray-900 mb-3 group-hover:text-[#ad986c] transition-colors leading-tight line-clamp-2">
                  {blog.title}
                </h3>
                
                {/* Description */}
                <p class="text-base font-inter text-gray-800 leading-relaxed mb-4 line-clamp-3">
                  {blog.description}
                </p>

                {/* Read More Arrow */}
                <div class="flex items-center gap-2 text-[#ad986c] font-inter font-semibold text-sm group-hover:gap-3 transition-all mt-auto">
                  <span>Read More</span>
                  <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
                  </svg>
                </div>
              </div>
            </a>
            );
          })}

          <!-- View All Posts Card -->
          <a href="/blog" class="blog-card flex-shrink-0 w-[calc(100vw-5rem)] sm:w-[calc(100vw-8rem)] lg:w-[calc((100%-3rem)/3)] snap-start group bg-white border-2 border-gray-200 rounded-2xl overflow-hidden shadow-sm hover:shadow-xl hover:border-[#ad986c] transition-all duration-300 hover:-translate-y-1" data-index={blogData.blogs.length}>
            <div class="p-8 lg:p-12 flex flex-col items-center justify-center text-center min-h-[400px]">
              <h3 class="text-2xl sm:text-3xl font-playfair font-semibold text-gray-900 mb-4 group-hover:text-[#ad986c] transition-colors">
                View All Posts
              </h3>
              
              <p class="text-base sm:text-lg font-inter text-gray-800 mb-6">
                Explore all our blog articles and stories
              </p>
              
              <div class="inline-flex items-center gap-2 bg-[#ad986c] hover:bg-[#8d7a56] text-white px-6 py-3 rounded-full font-inter font-semibold text-sm transition-all duration-300 shadow-md">
                <span>View All</span>
                <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
                </svg>
              </div>
            </div>
          </a>
        </div>
      </div>

      <!-- Pagination Dots -->
      <div id="blogPaginationDots" class="flex justify-center items-center gap-2 mt-8 sm:mt-12">
        {Array.from({ length: Math.ceil((blogData.blogs.length + 1) / 3) }, (_, i) => (
          <button 
            class={`pagination-dot transition-all duration-300 ${i === 0 ? 'w-8 h-2' : 'w-2 h-2 bg-gray-300'} rounded-full`}
            style={i === 0 ? 'background-color: #ad986c;' : ''}
            data-page={i}
            onclick={`goToBlogPage(${i})`}
            aria-label={`Go to page ${i + 1}`}
          ></button>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  .font-inter {
    font-family: 'Inter', sans-serif;
  }
  
  .font-playfair {
    font-family: 'Playfair Display', serif;
  }
  
  /* Smooth scroll for mobile carousel */
  .overflow-x-auto {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE/Edge */
  }
  
  .overflow-x-auto::-webkit-scrollbar {
    display: none; /* Chrome/Safari */
  }
  
  /* Smooth transitions */
  .blog-card {
    transition: all 0.3s ease;
    position: relative;
  }
  
  /* White overlay for cards outside main view */
  .blog-card::after {
    content: '';
    position: absolute;
    inset: 0;
    background: rgba(255, 255, 255, 0.7);
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    z-index: 5;
    border-radius: 1rem;
  }
  
  /* Show overlay on cards outside main view */
  .blog-card.card-hidden::after {
    opacity: 1;
  }
  
  /* Hide pagination dots on mobile */
  @media (max-width: 1023px) {
    #blogPaginationDots {
      display: none;
    }
  }
</style>

<script>
  // Carousel functionality
  let currentBlogPage = 0;
  let blogsPerPage = 3; // Default: Show 3 cards at a time on desktop
  let totalBlogCards = 0;
  let totalBlogPages = 0;
  const isBlogDesktop = () => window.innerWidth >= 1024;
  const BLOG_GAP_WIDTH = 24; // lg:gap-6 = 24px
  const blogCardMetrics = {
    width: 0
  };
  const blogGapMetrics = {
    value: BLOG_GAP_WIDTH
  };
  let blogResizeObserver;
  let blogDotObserver = null;
  let blogScrollHandler = null;
  let blogScrollTicking = false;

  function setActiveBlogDots(dots, activeIndex) {
    dots.forEach((dot, index) => {
      const isActive = index === activeIndex;
      dot.classList.toggle('w-8', isActive);
      dot.classList.toggle('w-2', !isActive);
      if (isActive) {
        dot.classList.remove('bg-gray-300');
        dot.style.backgroundColor = '#ad986c';
      } else {
        dot.classList.add('bg-gray-300');
        dot.style.backgroundColor = '';
      }
    });
  }

  function measureBlogCardWidth(card) {
    if (!card) return;
    const { width } = card.getBoundingClientRect();
    if (width && Math.abs(width - blogCardMetrics.width) > 0.5) {
      blogCardMetrics.width = width;
    }
  }

  function setupBlogMeasurement(cards) {
    if (!cards || cards.length === 0) return;
    const firstCard = cards[0];
    measureBlogCardWidth(firstCard);

    const container = document.getElementById('blogsContainer');
    if (container) {
      const styles = window.getComputedStyle(container);
      const gapValue = parseFloat(
        styles.columnGap || styles.gap || styles.gridColumnGap || '0'
      );
      if (!Number.isNaN(gapValue) && gapValue > 0) {
        blogGapMetrics.value = gapValue;
      }
    }

    if (typeof ResizeObserver !== 'undefined' && !blogResizeObserver) {
      blogResizeObserver = new ResizeObserver((entries) => {
        const entry = entries[0];
        if (!entry) return;
        measureBlogCardWidth(entry.target);
        window.requestAnimationFrame(updateBlogsCarousel);
      });
      blogResizeObserver.observe(firstCard);
    }
  }

  function initBlogsCarousel() {
    const cards = document.querySelectorAll('.blog-card');
    totalBlogCards = cards.length;
    
    // If 5 or fewer cards total (4 blogs + 1 "View All" card), show all at once on desktop
    if (isBlogDesktop() && totalBlogCards <= 5) {
      blogsPerPage = totalBlogCards;
      
      // Update card widths to fit all cards
      cards.forEach(card => {
        if (totalBlogCards === 4) {
          card.classList.remove('lg:w-[calc((100%-3rem)/3)]');
          card.classList.add('lg:w-[calc((100%-4.5rem)/4)]'); // 4 cards with gaps
        } else if (totalBlogCards === 5) {
          card.classList.remove('lg:w-[calc((100%-3rem)/3)]');
          card.classList.add('lg:w-[calc((100%-6rem)/5)]'); // 5 cards with gaps
        }
      });
    } else {
      blogsPerPage = 3;
    }
    
    totalBlogPages = Math.ceil(totalBlogCards / blogsPerPage);

    setupBlogMeasurement(cards);
    
    // Hide navigation if all cards are visible
    if (totalBlogPages <= 1) {
      const prevBtn = document.querySelector('button[onclick="previousBlogCard()"]');
      const nextBtn = document.querySelector('button[onclick="nextBlogCard()"]');
      const dots = document.getElementById('blogPaginationDots');
      
      if (prevBtn) prevBtn.style.display = 'none';
      if (nextBtn) nextBtn.style.display = 'none';
      if (dots) dots.style.display = 'none';
    } else {
      // Show navigation if needed
      const prevBtn = document.querySelector('button[onclick="previousBlogCard()"]');
      const nextBtn = document.querySelector('button[onclick="nextBlogCard()"]');
      const dots = document.getElementById('blogPaginationDots');
      
      if (prevBtn) prevBtn.style.display = '';
      if (nextBtn) nextBtn.style.display = '';
      if (dots) dots.style.display = '';
    }
    
    updateBlogsCarousel();
    setupBlogDotTracking();
  }

  function updateBlogsCarousel() {
    if (!isBlogDesktop()) {
      // Mobile: no transform, use native scroll
      const container = document.getElementById('blogsContainer');
      if (container) {
        container.style.transform = 'translateX(0)';
      }
      // Remove all overlays on mobile
      const cards = document.querySelectorAll('.blog-card');
      cards.forEach(card => card.classList.remove('card-hidden'));
      return;
    }
    
    // Desktop: show 3 cards at a time with transform
    const container = document.getElementById('blogsContainer');
    const cards = document.querySelectorAll('.blog-card');
    const dots = document.querySelectorAll('#blogPaginationDots .pagination-dot');
    
    if (!container || cards.length === 0) return;
    
    // Calculate the offset based on card index
    const firstCard = cards[0];
    if (!firstCard) return;

    if (!blogCardMetrics.width) {
      measureBlogCardWidth(firstCard);
    }

    const cardWidth = blogCardMetrics.width;
    const gapWidth = blogGapMetrics.value;
    if (!cardWidth) return;
    
    // Calculate how much to move: (cardWidth + gap) * blogsPerPage * currentBlogPage
    const offsetPx = (cardWidth + gapWidth) * blogsPerPage * currentBlogPage;
    
    container.style.transform = `translateX(-${offsetPx}px)`;
    
    // Update card overlays - show overlay on cards outside current view
    const firstVisibleIndex = currentBlogPage * blogsPerPage;
    const lastVisibleIndex = firstVisibleIndex + blogsPerPage - 1;
    
    cards.forEach((card, index) => {
      if (index < firstVisibleIndex || index > lastVisibleIndex) {
        card.classList.add('card-hidden');
      } else {
        card.classList.remove('card-hidden');
      }
    });
    
    // Update dots
    setActiveBlogDots(dots, currentBlogPage);
    
    // Show/hide navigation arrows based on position
    const prevBtn = document.querySelector('button[onclick="previousBlogCard()"]');
    const nextBtn = document.querySelector('button[onclick="nextBlogCard()"]');
    
    if (prevBtn) {
      prevBtn.style.opacity = currentBlogPage === 0 ? '0.3' : '1';
      prevBtn.style.pointerEvents = currentBlogPage === 0 ? 'none' : 'auto';
    }
    
    if (nextBtn) {
      nextBtn.style.opacity = currentBlogPage >= totalBlogPages - 1 ? '0.3' : '1';
      nextBtn.style.pointerEvents = currentBlogPage >= totalBlogPages - 1 ? 'none' : 'auto';
    }
  }

  function nextBlogCard() {
    if (currentBlogPage < totalBlogPages - 1) {
      currentBlogPage++;
      updateBlogsCarousel();
    }
  }

  function previousBlogCard() {
    if (currentBlogPage > 0) {
      currentBlogPage--;
      updateBlogsCarousel();
    }
  }
  
  function goToBlogPage(pageIndex) {
    currentBlogPage = pageIndex;
    updateBlogsCarousel();
  }
  
  // Make functions globally accessible
  window.nextBlogCard = nextBlogCard;
  window.previousBlogCard = previousBlogCard;
  window.goToBlogPage = goToBlogPage;

  function teardownBlogDotTracking() {
    const container = document.getElementById('blogsContainer');
    if (blogDotObserver) {
      blogDotObserver.disconnect();
      blogDotObserver = null;
    }
    if (container && blogScrollHandler) {
      container.removeEventListener('scroll', blogScrollHandler);
      blogScrollHandler = null;
      blogScrollTicking = false;
    }
  }

  function setupBlogDotTracking() {
    const container = document.getElementById('blogsContainer');
    const dots = document.querySelectorAll('#blogPaginationDots .pagination-dot');
    if (!container || dots.length === 0) return;

    teardownBlogDotTracking();

    if (isBlogDesktop()) {
      setActiveBlogDots(dots, currentBlogPage);
      return;
    }

    const cards = container.querySelectorAll('.blog-card');
    if (cards.length === 0) return;

    if ('IntersectionObserver' in window) {
      blogDotObserver = new IntersectionObserver(
        (entries) => {
          const visible = entries
            .filter((entry) => entry.isIntersecting)
            .sort((a, b) => b.intersectionRatio - a.intersectionRatio)[0];
          if (!visible) return;
          const cardIndex = Number(visible.target.getAttribute('data-index') || '0');
          const dotIndex = Math.min(
            Math.floor(cardIndex / blogsPerPage),
            dots.length - 1
          );
          setActiveBlogDots(dots, dotIndex);
        },
        {
          root: container,
          threshold: 0.6
        }
      );

      cards.forEach((card) => blogDotObserver.observe(card));
      return;
    }

    blogScrollHandler = () => {
      if (blogScrollTicking) return;
      blogScrollTicking = true;

      window.requestAnimationFrame(() => {
        const cardWidth =
          blogCardMetrics.width ||
          container.firstElementChild?.getBoundingClientRect?.().width ||
          container.clientWidth;
        const itemSpan = cardWidth + blogGapMetrics.value;
        if (itemSpan > 0) {
          const scrollCenter = container.scrollLeft + container.clientWidth / 2;
          const approxIndex = Math.round(scrollCenter / itemSpan);
          const dotIndex = Math.max(
            0,
            Math.min(Math.floor(approxIndex / blogsPerPage), dots.length - 1)
          );
          setActiveBlogDots(dots, dotIndex);
        }
        blogScrollTicking = false;
      });
    };

    container.addEventListener('scroll', blogScrollHandler, { passive: true });
    blogScrollHandler();
  }

  // Initialize carousel on page load
  document.addEventListener('DOMContentLoaded', () => {
    initBlogsCarousel();
    
    // Re-initialize on window resize
    let resizeTimer;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(() => {
        initBlogsCarousel();
      }, 250);
    });
  });
</script>
